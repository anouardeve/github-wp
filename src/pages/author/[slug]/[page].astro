---
import { Image } from "astro:assets";
import { SEO } from "astro-seo";
import { Schema } from "astro-seo-schema";
import Container from "@components/container.astro";
import Postlist from "@components/postlist.astro";
import Pagination from "@components/pagination.astro";
import Layout from "@layouts/Layout.astro";
import config from "@config/config.json";
import { getAllAuthors } from "@utils/get-all-authors";

export async function getStaticPaths({ paginate }) {
  try {
    const response = await fetch(
      `${config.API_URL}/wp-json/coauthors/v1/search`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization:
            "Basic " +
            Buffer.from(
              `${import.meta.env.WP_USERNAME}:${import.meta.env.WP_APPLICATION_PASSWORD}`,
            ).toString("base64"),
        },
      },
    );

    const data = await response.json();

    if (!Array.isArray(data)) {
      throw new Error('Data is not an array');
    }

    return (
      await Promise.all(
        data.map(async (author) => {
          const response = await fetch(`${config.API_URL}/graphql`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              query: `
                query GetPostsByAuthor {
                  posts(first: 100, where: {authorName: "${author.userNicename}"}) {
                    nodes {
                      slug
                      title
                      date
                      featuredImage {
                        node {
                          mediaItemUrl
                          altText
                        }
                      }
                      author {
                        node {
                          name
                          slug
                          avatar {
                            foundAvatar
                            url
                          }
                          description
                          seo {
                            canonical
                            title
                            metaDesc
                            metaRobotsNoindex
                            metaRobotsNofollow
                            opengraphDescription
                            opengraphTitle
                            twitterTitle
                            twitterDescription
                            opengraphImage {
                              mediaItemUrl
                            }
                            schema {
                              raw
                            }
                          }
                        }
                      }
                      categories {
                        edges {
                            isPrimary
                            node {
                                name
                                slug
                            }
                        }
                      }
                    }
                  }
                }
              `,
            }),
          });
          const { data } = await response.json();

          return paginate(data.posts.nodes, {
            params: { slug: author.userNicename },
            props: { author },
            pageSize: 6,
          });
        }),
      )
    ).flat();
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

const { page, author } = Astro.props;

// Build a list of all authors
const authors = await getAllAuthors(page.data);
---

<Layout>
  <Fragment slot="head">
    <SEO
      title={page.data[0]?.author?.node?.seo?.title || "Author Page"}
      description={page.data[0]?.author?.node?.seo?.metaDesc || ""}
      canonical={Astro.url}
      openGraph={{
        basic: {
          url: page.data[0]?.author?.node?.seo?.canonical || Astro.url,
          type: "article:author",
          title: page.data[0]?.author?.node?.seo?.opengraphTitle || "Author Page",
          image: page.data[0]?.author?.node?.seo?.opengraphImage?.mediaItemUrl || "",
        },
        image: { alt: page.data[0]?.author?.node?.seo?.opengraphTitle || "Author Page" },
      }}
      extend={{
        meta: [
          {
            name: "og:description",
            content: page.data[0]?.author?.node?.seo?.opengraphDescription || "",
          },
          {
            name: "twitter:title",
            content: page.data[0]?.author?.node?.seo?.twitterTitle || "",
          },
          {
            name: "twitter:description",
            content: page.data[0]?.author?.node?.seo?.twitterDescription || "",
          },
        ],
      }}
      noindex={page.data[0]?.author?.node?.seo?.metaRobotsNoindex === "noindex"}
      nofollow={page.data[0]?.author?.node?.seo?.metaRobotsNofollow === "nofollow"}
    />

    {page.data[0]?.author?.node?.seo?.schema?.raw && (
      <Schema item={JSON.parse(page.data[0].author.node.seo.schema.raw)} />
    )}
  </Fragment>

  <Container>
    <main>
      <div class="flex flex-col items-center justify-center">
        {author?.avatar && (
          <Image
            src={author.avatar}
            alt={author.displayName || "Author"}
            width={80}
            height={80}
            loading="eager"
            class="rounded-full"
          />
        )}

        <h1
          class="text-brand-primary mt-2 text-3xl font-semibold tracking-tight lg:text-3xl lg:leading-tight dark:text-white"
        >
          {author?.displayName || "Author"}
        </h1>
        <div
          class="mx-auto mt-2 flex max-w-xl flex-col px-5 text-center text-gray-500"
        >
          {authors && (
            <Fragment
              set:html={Object.values(authors).find(
                (authorList) => authorList.user_nicename === author?.userNicename,
              )?.description?.rendered || ""}
            />
          )}
        </div>
      </div>

      <div class="mt-20 grid gap-10 md:grid-cols-2 lg:gap-10 xl:grid-cols-3">
        {page.data.map((post) => <Postlist post={post} authors={authors} />)}
      </div>

      <Pagination url={page.url} />
    </main>
  </Container>
</Layout>
