---
import { SEO } from "astro-seo";
import { Schema } from "astro-seo-schema";
import Container from "@components/container.astro";
import Postlist from "@components/postlist.astro";
import Pagination from "@components/pagination.astro";
import Layout from "@layouts/Layout.astro";
import config from "@config/config.json";
import { getAllAuthors } from "@utils/get-all-authors";

export async function getStaticPaths({ paginate }) {
  const response = await fetch(`${config.API_URL}/graphql`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: `
        query GetAllCategories {
          categories {
            nodes {
              name
              slug
              seo {
                canonical
                title
                metaDesc
                metaRobotsNoindex
                metaRobotsNofollow
                opengraphDescription
                opengraphTitle
                opengraphDescription
                twitterTitle
                twitterDescription
                opengraphImage {
                  mediaItemUrl
                }
                schema {
                  raw
                }
              }
            }
          }
        }
      `,
    }),
  });
  const { data } = await response.json();

  return (
    await Promise.all(
      data.categories.nodes.map(async (category) => {
        // Get posts by category
        const response = await fetch(`${config.API_URL}/graphql`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            query: `
              query GetPostsByCategory {
                posts(first: 100, where: {categoryName: "${category.slug}"}) {
                  nodes {
                    slug
                    title
                    date
                    featuredImage {
                      node {
                        mediaItemUrl
                        altText
                      }
                    }
                    author {
                      node {
                        name
                        slug
                        avatar {
                          foundAvatar
                          url
                        }
                      }
                    }
                    categories {
                      edges {
                          isPrimary
                          node {
                              name
                              slug
                          }
                      }
                    }
                  }
                }
              }
            `,
          }),
        });
        const { data } = await response.json();

        return paginate(data.posts.nodes, {
          params: { slug: category.slug },
          props: { category },
          pageSize: 6,
        });
      }),
    )
  ).flat();
}

const { page, category } = Astro.props;

// Build a list of all authors
const authors = await getAllAuthors(page.data);
---

<Layout>
  <Fragment slot="head">
    <SEO
      title={category.seo.title}
      description={category.seo.metaDesc}
      canonical={Astro.url}
      openGraph={{
        basic: {
          url: category.seo.canonical,
          type: "article:category",
          title: category.seo.opengraphTitle,
          image: category?.seo?.opengraphImage?.link ?? "",
        },
        image: { alt: category.seo.opengraphTitle },
      }}
      extend={{
        meta: [
          {
            name: "og:description",
            content: category.seo.opengraphDescription,
          },
          { name: "twitter:title", content: category.seo.twitterTitle },
          {
            name: "twitter:description",
            content: category.seo.twitterDescription,
          },
        ],
      }}
      noindex={category.seo.metaRobotsNoindex === "noindex"}
      nofollow={category.seo.metaRobotsNofollow === "nofollow"}
    />

    <Schema item={JSON.parse(category.seo.schema.raw)} />
  </Fragment>

  <Container>
    <main>
      <div class="flex flex-col items-center justify-center">
        <h1
          class="text-brand-primary text-3xl font-semibold tracking-tight lg:text-5xl lg:leading-tight dark:text-white"
        >
          {category.name}
        </h1><p class="mt-1 text-gray-600">{page.data.length} Articles</p>
      </div>

      <div class="mt-20 grid gap-10 md:grid-cols-2 lg:gap-10 xl:grid-cols-3">
        {page.data.map((post) => <Postlist post={post} authors={authors} />)}
      </div>

      <Pagination url={page.url} />
    </main>
  </Container>
</Layout>
